let's begin our discussion of minimum at a distance by defining minimum mid-distance
 minimum edit distance is a way of solving the problem of string similarity
 how similar are two strings particular examples spell correction the user type g r a f f e what are they really mean and one way of operationalizing this question is asking which of the following words is closer to the letters that they typed graph graft Grail or giraffe tationil biology where we have sequences of nucleotides acgt World we're trying to align and and a good alignment be able to tell us that two particular sequence is perhaps from two samples line up in a search
hey what's um amount of error in this idea of string similarity or sequence similarity comes up for machine translation for information extraction for speech recognition comes up everywhere so let's define the minimum at a distance between two strings is the minimum number of editing operations I'm insertion deletion and substitution that are needed to transform one into the other and we generally use these 3M editing operations insertion deletion the substitution that you can imagine more complicated transpositions and a long-distance movement that we tend to avoid those
so for example we have the string in tension in the string execution here's an alignment showing that many of the letters lineup and with some substitutions and then there was some gaps where
I got your lines up with a letter C and execution and a gap in execution lines up with the letter I and intention and so on
 so then we can think about this alignment as having a set of operations that generated the alignment so here the to turn intention and execution we have to delete D4 delete and I we substitute an end for any substitute a t for an X insert a c substituting in for you and the rest of the letters d e the t i o n are all the same so the edit assistance if each operation is one is 5 there's 5 we had to do 5 things to turn intention into execution
 if substitutions cost to scald Levinson
distance and levenshtein distance and insertions and deletions cost one but substitutions cost to and now the distance between these two strings is 8
 in competition biology we've seen sequences of bases and our job is to figure out that this is a align to this a mystery to this G and and maybe this t a n t and c a c and so on and so on the seat here so we have some we can see that there's some kind of insertion there we can represent again that alignment between characters by showing this align string of symbols so the task is given to sequences align each letter to a letter when a guy that's on Cascade
edit distance comes up all over the place and machine translation for example we'd like to measure how well a machine translation system does so let's suppose that our machine translation system represented some sentence may be translated from Chinese as the spokesman said the senior advisor was shot dead and some human expert translator said it should have been spokesman confirm senior government advisor was shot so we can measure the difference between these two by saying how many words changed confirms was was substituted with said words that were inserted and the and words and dead and words that were deleted government so it
measuring how good are machine translation is by comparing it to humans
 similarly in task lightning entity extraction we're going to want to know if IBM ink and IBM are the same entity or Stanford University President John Hennessy is the same entity is Stanford President John Hennessy and we can do that by using at a distance to notice that these are very similar with one word different in here when were different and so by measuring the number of words different we can improve our accuracy Aetna dental extraction and hand and other kinds of tasks are we going to find this minimum distance or intuition for the algorithms to search for a path and it will I pass me a sequence of edits from the start string to the final string so we'll start with an initial state so that would be the word word transforming
we'll have a set of operators insertion deletion substitution will have a goal State that's the word we're trying to get to
 and finally will have a cost for the path of getting there and that's the thing we're trying to minimize that's the number of its that's our path cost so for example from intention he was a piece of a path from intention we could delete a letter in end up with attention we could insert a letter and end up with Ian tension with a substitute a letter and end up with intention so that's these are pieces along a path that would go from intention all the way off the screen here into of all the possible ways you can transform intention into something
 so this space of all possible sequences is enormous Diamond so we can't afford to navigate and I believe in this in the sequence
and the intuition of solving this problem of lots of possible sequences is that lots of these pass wined up at the same state so we don't have to keep track of every way of transforming one string into another if the second pieces of a second string or identical all we have to keep is the shortest path to every Revisited States what's an example of how this works we're going to find minimum edit distance formally as for two strings
 we have string X of LinkedIn and string y blank m
 will Define a distance Matrix capital D of i j
 and that would be the edit distance between the first I characters one through I of X and the
first J characters 1 through J of string why so that's that that's what's in that supposed to find by D of i j and so the distance between the entire two strings is going to be d a ban come in the springs are blank to NM
 what are definition of minimum at a distance
